import { GoogleGenAI, GenerateContentResponse, Part } from "@google/genai";
import { Language, BirdData, InputMode } from '../types';
import { RESPONSE_SCHEMA, LANGUAGES } from '../constants';

const API_KEY = process.env.API_KEY;

if (!API_KEY) {
  throw new Error("API_KEY environment variable not set");
}

const ai = new GoogleGenAI({ apiKey: API_KEY });
const textModel = "gemini-2.5-flash";
const imageModel = 'imagen-3.0-generate-002';

const fileToGenerativePart = async (file: File): Promise<Part> => {
  const base64EncodedDataPromise = new Promise<string>((resolve) => {
    const reader = new FileReader();
    reader.onloadend = () => {
        if (typeof reader.result === 'string') {
            resolve(reader.result.split(',')[1]);
        } else {
            resolve('');
        }
    };
    reader.readAsDataURL(file);
  });
  const base64EncodedData = await base64EncodedDataPromise;
  return {
    inlineData: {
      data: base64EncodedData,
      mimeType: file.type,
    },
  };
};

export const identifyBird = async (
  mode: InputMode,
  data: File | string,
  language: Language
): Promise<BirdData> => {
  const languageName = LANGUAGES.find(l => l.code === language)?.name || 'English';
  const systemInstruction = `You are 'BirdGuide Rwanda', a friendly AI assistant for birdwatchers. Your purpose is to identify Rwandan bird species from photos, sounds, or text descriptions. Only identify birds found in Rwanda. Do not invent species. Your tone should be warm and helpful. Always respond in ${languageName}. For the 'description' field, provide a detailed visual description focusing on plumage color, patterns, beak shape and color, eye color, and any distinctive markings, as this will be used to generate a matching image. Your output must be a single, valid JSON object matching the provided schema. If you cannot identify the bird, ensure the 'birdName' is 'Unknown' and the 'error' field explains why.`;
  
  let userPrompt: string;
  const parts: Part[] = [];

  if (mode === 'photo' && data instanceof File) {
    userPrompt = `Please identify the bird in this photo.`;
    parts.push(await fileToGenerativePart(data));
  } else if (mode === 'sound' && data instanceof File) {
    userPrompt = `Please identify the bird from this sound recording.`;
    parts.push(await fileToGenerativePart(data));
  } else if (mode === 'text' && typeof data === 'string') {
    userPrompt = `A user described a bird as follows: "${data}". Please identify this Rwandan bird.`;
  } else {
    throw new Error("Invalid input data or mode.");
  }
  
  parts.push({ text: userPrompt });

  try {
    const response: GenerateContentResponse = await ai.models.generateContent({
      model: textModel,
      contents: { parts: parts },
      config: {
        systemInstruction: systemInstruction,
        responseMimeType: "application/json",
        responseSchema: RESPONSE_SCHEMA,
      }
    });
    
    const text = response.text.trim();
    const resultJson = JSON.parse(text);

    return resultJson as BirdData;

  } catch (error) {
    console.error("Gemini API call failed:", error);
    const genericError: BirdData = {
        birdName: "Error",
        scientificName: "",
        location: "",
        description: "",
        funFacts: { diet: "", habitat: "", behavior: ""},
        spottingTip: "",
        error: "An unexpected error occurred while contacting the AI. Please check the console for details."
    };
    return genericError;
  }
};

export const generateBirdImage = async (birdData: BirdData, language: Language): Promise<string> => {
    const prompt = `Ultra-realistic, high-detail photograph of a single ${birdData.birdName} (${birdData.scientificName}). The bird has the following distinct features: ${birdData.description}. It is perched naturally in its Rwandan habitat, which is ${birdData.funFacts.habitat}. The lighting is natural and highlights the bird's plumage. Focus on scientific accuracy.`;

    try {
        const response = await ai.models.generateImages({
            model: imageModel,
            prompt: prompt,
            config: {
                numberOfImages: 1,
                outputMimeType: 'image/jpeg',
                aspectRatio: '16:9',
            },
        });

        if (response.generatedImages && response.generatedImages.length > 0) {
            return response.generatedImages[0].image.imageBytes;
        } else {
            throw new Error("No image was generated by the API.");
        }
    } catch (error) {
        console.error("Gemini image generation failed:", error);
        throw error;
    }
};